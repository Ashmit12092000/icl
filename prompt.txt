app calculation for compound interest quartely frequency is giving right values till repayment transaction . when a repayment transaction happened then from that point of time it start giving wrong values for all the subsequent transaction . suppose a user start date is 01/04/2023 and end date is 31/03/2024, first compunding date : 01/04/2023. so 1st Deposit transaction happened on 01/04/2024 . then second deposit transation happened on 06/04/2023 , 3rd deposit on 19-04-2023 , 4th deposit on 30-05-2023 then a repayemnt transaction happened on 08-06-2023 from here the calculation started giving wrong periods . last transaction before repayment transaction was made on 30-05-2023 so at repayment transaction the period split will 31/05/2023 to 8/06/2023 but the app is generating period for reapyment transaction blindly from starting of the quarter (01/04/2024) to 08/06/2023.


okay now the repayment period is coming right but the days is showing in negative becuase , when i deposit on 30/05/2023 it is creating period from 30/05/2023 till 30/06/2023 (quarter end . so after this transaction when i add a repayment transaction it will take last transaction end date +1 as the start date of repayment transaction. so in this case it is taking 30/06/2023 as the end date of last transaction +1 to 08/06/2023 (repayment date ) resulting in negative days count(-22) . so if you understood the problme then find the dynamic solution for this issue


so currently repayment starting date is calculating wrong date , suppose in my case . i have made 4 deposit transaction starting from 01/04/2023, followed by on 06/04/2023 , 19/04/2023 & 30/05/2023 . so when i'm making a repayment transaction on 08/06/2024 it is creating period from 30/05/2023 to 07/06/2023 where as it should start from 08/06/2023 .


so it worked but some more issue is there . for repayment transaction it is giving wrong values initially and then when i'm editing that transction and saving again without changing any values then it is giving correct values . find the root cause of this problem and fix that for compounf interests users

In the current repayment logic for compund interest quarterly users , there is one scenario if there is any transaction happened after the repayment transaction then it will delete the passive period transaction and the end date of repayment transaction will get shifted as per new transaction date . Suppose on 8th June a repayment transaction happened then it create passive period transaction from 9th June till end of quarter date . 30june. But I added another deposit transaction on 26th June so it will the delete the passive period transaction as it is no longer valid and then the repayment transaction will be recalculated with end of a day before of new transaction date . This is working but ahead in some other quarter I'm doing back to back repayment transaction then it is merging both transaction by applying this logic . It should merge it should split the transaction if there are back to back repayment transaction. Find some workaround for this . But do not the delete the logic which I was using in June quarter. Find something other dynamic solution

Now I also need to fix the _handle_repayment_recalculation_after_new_transaction function to prevent it from extending repayment periods when there are multiple repayments

- The first quarter works because there’s no previous accumulated interest.
- For subsequent quarters, the code adds up net interest from previous quarters only, but if there is a mistake in how transactions are grouped, or how the previous quarter’s interest is accumulated, it could cause incorrect principal calculation for compounding.

**Key code locations handling this:**
- In the transaction POST logic (search for `# For compound interest, include accumulated net interest only from previous quarters (not current quarter)` at line ~1041).
- In the recalculation logic (`recalculate_customer_transactions`), where it adds up net interest from previous quarters (see lines ~1788-1801).
- `_is_quarter_end` and `_get_quarter_start_date`/_`_get_quarter_end_date` handle period boundaries.

**What to check/fix:**
1. **Accumulation of net interest from previous quarters:**  
   - Ensure that when calculating the principal for a new quarter, you are only adding the net interest from transactions whose period_to is at a quarter-end (not all previous transactions).
2. **The selection of transactions:**  
   - When you sum up previous net interest, double-check that you are not skipping or double-counting any quarters.
3. **Balance update at quarter end:**  
   - The actual compounding (adding net interest to balance) only happens if it is the last transaction of the quarter.

**Example of possible buggy logic:**
```python
previous_quarter_transactions = Transaction.query.filter(
    Transaction.customer_id == customer_id,
    Transaction.date < quarter_start
).order_by(Transaction.date.asc(), Transaction.id.asc()).all()

accumulated_net_interest_from_previous_quarters = Decimal('0')
for prev_txn in previous_quarter_transactions:
    accumulated_net_interest_from_previous_quarters += prev_txn.get_safe_net_amount()
```
This adds ALL previous net interest, but you should only add those where `prev_txn.period_to` is a quarter-end.

**Suggested fix:**
Change the accumulation logic to:
```python
for prev_txn in previous_quarter_transactions:
    if _is_quarter_end(prev_txn.period_to, customer.icl_start_date):
        accumulated_net_interest_from_previous_quarters += prev_txn.get_safe_net_amount()
```
This ensures only past quarter-end interests are compounded.
